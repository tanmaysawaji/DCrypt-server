from dcrypt.utils.prime_number_generator import PrimeNumberGenerator

class HandShake(object):

    # modulo (p)
    # base (g)
    # Secret number is generated by client and server separately
    # Let Alice be the client and Bob be the server
    # Secret key of Alice is a, secret key of Bob is b
    # Shared key of alice is calculated by A = g ^ a mod p
    # Shared key of Bob is calculated by B = g ^ b mod p
    # Alice shares key shared key A with Bob and Bob shares B with Alice
    # Alice calculates the key by key = B ^ a mod p
    # Bob calculates the key by key = A ^ b mod p
    # Both keys will be the same

    def __init__(self) -> None:
        self.bit_len = 4096
        self.modulo = 649814244484027612028874733645429498248639182143424970435518106042628159642543573360499828750881617063603502745051536656509435142843350261047067089563116691492320105645724045126196867463182226739363528702643796177514310405865386209551850852701845781737013171322647144685453573912769581526859200730271881386630163461670549073125726888553047298345599628957353831378042954458898576680986744917226088991919067257057050713914458079157932887571279010470035817252897975933146558123373966230826038143459479008927981423936637038333515381826095913055984775455205406274504643952358017109258922636892604659850309239233147758923370493782656235210008977034736276536307200053294442463775647057925970803029206996774268920978098904399023391497367543870913717962415288983426893406679184236895557533899278552419358402167636114514353656891753556014173584294457145840129967908751943397228069739532639981482285354651746219031882435296656676802366058750906617169790438289983252831572935604988107254825904323620206014908572905906578502578021386304546337139373295288865933202555759266344545829163650615770481570202756079442100806340724797647702416331263189727959673832986410989447595635508960834742255085597324353998343969126251145393118095619229340960104013
        self.base = 2
        
    # Private methods
    
    def _generate_secret_key(self):
        self.secret_key = PrimeNumberGenerator().generate_prime(n_bits=1024)
    
    def _calculate_shared_key(self):
        self.shared_key = pow(self.base, self.secret_key, self.modulo)
        
    def _calculate_final_key(self):
        self.final_key = pow(self.senders_shared_key, self.secret_key, self.modulo)
    
    def get_senders_shared_key(self, key):
        self.senders_shared_key = key
    
    def encrypt_message(self, message):
        pass
    
    def decrypt_message(self, message):
        pass
